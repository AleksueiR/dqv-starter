<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>
        <%= htmlWebpackPlugin.options.title %>
    </title>
    <% if (htmlWebpackPlugin.options.description) { %>
        <meta name="description" content="<%= htmlWebpackPlugin.options.description %>" />
        <% } %>

            <!-- if you need IE support -->
            <!-- <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script> -->

            <script>
                dv1data = {
                    message: 'Declarative section with sync data from global scope'
                };

                dvchart1config = {
                    exporting: {
                        menuItemDefinitions: {
                            viewData: null
                        }
                    },
                    title: {
                        text: 'Solar Employment Growth by Sector, 2010-2016'
                    },

                    subtitle: {
                        text: 'Source: thesolarfoundation.com'
                    },

                    yAxis: {
                        title: {
                            text: 'Number of Employees'
                        }
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'middle'
                    },

                    plotOptions: {
                        series: {
                            label: {
                                connectorAllowed: false
                            },
                            pointStart: 2010
                        }
                    },

                    credits: {
                        enabled: false
                    },

                    series: [{
                        name: 'Installation'
                    }, {
                        name: 'Manufacturing'
                    }, {
                        name: 'Sales & Distribution'
                    }, {
                        name: 'Project Development'
                    }, {
                        name: 'Other'
                    }],

                    responsive: {
                        rules: [{
                            condition: {
                                maxWidth: 500
                            },
                            chartOptions: {
                                legend: {
                                    layout: 'horizontal',
                                    align: 'center',
                                    verticalAlign: 'bottom'
                                }
                            }
                        }]
                    }

                };

                dvchart1data = [
                    [43934, 52503, 57177, 69658, 97031, 119931, 137133, 154175],
                    [24916, 24064, 29742, 29851, 32490, 30282, 38121, 40434],
                    [11744, 17722, 16005, 19771, 20185, 24377, 32147, 39387],
                    [null, null, 7988, 12169, 15112, 22452, 34400, 34227],
                    [12908, 5948, 8105, 11248, 8989, 11816, 18274, 18111],
                ];

                dv2data = new Promise(function (resolve) {
                    const data = { message: 'Declarative section with async data using Promise from global scope', seconds: 6 }
                    window.setInterval(function () { data.seconds--; }, 1000);
                    resolve(data);
                });

                dvchart2config = new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve({
                            chart: {
                                type: 'bar'
                            },
                            title: {
                                text: 'Fruit Consumption'
                            },
                            xAxis: {
                                categories: ['Apples', 'Bananas', 'Oranges']
                            },
                            yAxis: {
                                title: {
                                    text: 'Fruit eaten'
                                }
                            },
                            series: [{
                                name: 'Jane',
                                data: [1, 0, 4]
                            }, {
                                name: 'John',
                                data: [5, 7, 3]
                            }]
                        })
                    }, 6000)
                }
                );

                // testing programmatic bootstrap
                window.addEventListener('load', function () {
                    const testTemplate =
                        '    <dv-section id="dv3">' +
                        '        <h3>{{ message }}</h3>' +

                        '        <dv-chart id="nuclear"><dv-chart-table></dv-chart-table></dv-chart>' +

                        '        <dv-chart></dv-chart>' +
                        '        <dv-chart id="dfdf"></dv-chart>' +

                        '        [{{ count }}]' +
                        '    </dv-section>'
                        ;

                    const data = {
                        message: 'Programmatic section with sync data',
                        count: 0
                    };

                    const chartConfig = {
                        chart: {
                            type: 'area'
                        },
                        title: {
                            text: 'US and USSR nuclear stockpiles'
                        },
                        subtitle: {
                            text: 'Source: <a href="http://thebulletin.metapress.com/content/c4120650912x74k7/fulltext.pdf">' +
                                'thebulletin.metapress.com</a>'
                        },
                        xAxis: {
                            allowDecimals: false,
                            labels: {
                                formatter: function () {
                                    return this.value; // clean, unformatted number for year
                                }
                            }
                        },
                        yAxis: {
                            title: {
                                text: 'Nuclear weapon states'
                            },
                            labels: {
                                formatter: function () {
                                    return this.value / 1000 + 'k';
                                }
                            }
                        },
                        tooltip: {
                            pointFormat: '{series.name} produced <b>{point.y:,.0f}</b><br/>warheads in {point.x}'
                        },
                        plotOptions: {
                            area: {
                                pointStart: 1940,
                                marker: {
                                    enabled: false,
                                    symbol: 'circle',
                                    radius: 2,
                                    states: {
                                        hover: {
                                            enabled: true
                                        }
                                    }
                                }
                            }
                        },
                        series: [{
                            name: 'USA',
                            data: [null, null, null, null, null, 6, 11, 32, 110, 235, 369, 640,
                                1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468, 20434, 24126,
                                27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342, 26662,
                                26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605,
                                24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586,
                                22380, 21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950,
                                10871, 10824, 10577, 10527, 10475, 10421, 10358, 10295, 10104]
                        }, {
                            name: 'USSR/Russia',
                            data: [null, null, null, null, null, null, null, null, null, null,
                                5, 25, 50, 120, 150, 200, 426, 660, 869, 1060, 1605, 2471, 3322,
                                4238, 5221, 6129, 7089, 8339, 9399, 10538, 11643, 13092, 14478,
                                15915, 17385, 19055, 21205, 23044, 25393, 27935, 30062, 32049,
                                33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000, 37000,
                                35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000,
                                21000, 20000, 19000, 18000, 18000, 17000, 16000]
                        }]
                    };

                    window.setInterval(function () { data.count++; }, 6000);

                    const dvc = new DQV.Chart({ id: 'nuclear', config: chartConfig });
                    const dvs = new DQV.Section({ data: data, id: 'dv33', template: testTemplate/* , charts: [dvc] */ });
                    dvs
                        .addChart(dvc)
                        .mount(document.getElementById('target1'));

                })
            </script>

            <style>
                body {
                    font-family: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, SimSun, sans-serif;
                }

                h3 {
                    text-align: center;
                    margin: 8px;
                }

                dv-section {
                    display: none;
                }

                [dv-section] {
                    padding: 10px;
                    margin: 5px 0;
                    border: 1px solid black;

                    width: 650px;
                }

                [dv-chart-container] {
                    height: 300px;
                }

                [dv-chart].dv-loading {
                    display: none;
                }

                .delay-message {
                    width: 100%;
                    text-align: center;
                    font-size: 20pt;
                    font-weight: bold;
                }

                details {
                    padding: 12px;
                    background: #ecf0f1;
                }

                summary {
                    font-weight: bold;
                    cursor: pointer;
                }

                details div.summary {
                    margin-top: 12px;
                }

                details[open] summary~* {
                    animation-name: invisiblyGrowFontSize, fadeIn;
                    animation-duration: 300ms, 200ms;
                    animation-delay: 0ms, 300ms;
                }

                @keyframes invisiblyGrowFontSize {
                    0% {
                        font-size: 0;
                        opacity: 0;
                    }
                    100% {
                        font-size: 1em;
                        opacity: 0;
                    }
                }

                @keyframes fadeIn {
                    0% {
                        opacity: 0;
                    }
                    100% {
                        opacity: 1;
                    }
                }

                table {
                    color: #333;
                    border-collapse: collapse;
                    border-spacing: 0;
                }

                td,
                th {
                    border: 1px solid #CCC;
                    height: 30px;
                    width: 1%;
                }

                th {
                    background: #F3F3F3;
                    font-weight: bold;
                }

                td {
                    background: #FAFAFA;
                    text-align: center;
                }
            </style>

</head>

<body>
    <dv-section id="app1" dv-data="dv1data">
        <h3>{{ message }}</h3>

        <dv-chart id="app1chart1" class="chart1" dv-data='dvchart1data' dv-config="dvchart1config">
            <details>
                <summary>View chart data</summary>
                <div class="summary">
                    <p>Here we can display chart data in a nice table.</p>
                    <dv-chart-table dv-auto-render dv-table-class="whatever andto"></dv-chart-table>
                </div>
            </details>
        </dv-chart>
    </dv-section>

    <dv-section dv-data="dv2data">
        <h3>{{ message }} </h3>
        <div v-if="seconds > 0" class="delay-message">Chart will load in {{ seconds }} second{{ seconds > 1 ? 's' : '' }}</div>

        <dv-chart dv-config="dvchart2config" class="chart2"></dv-chart>
    </dv-section>

    <div id="target1"></div>

    <script src="https://code.highcharts.com/highcharts.src.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.src.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.src.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.src.js"></script>

</body>

</html>